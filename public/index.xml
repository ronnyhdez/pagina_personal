<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ronny Hdez-Mora on Ronny Hdez-Mora</title>
    <link>/</link>
    <description>Recent content in Ronny Hdez-Mora on Ronny Hdez-Mora</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tiempo en R (I Parte)</title>
      <link>/post/tiempo-en-r-i-parte/</link>
      <pubDate>Wed, 14 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/tiempo-en-r-i-parte/</guid>
      <description>&lt;div id=&#34;tiempo&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Tiempo&lt;/h1&gt;
&lt;p&gt;La medición del tiempo es algo que puede ser particular, ya que hay meses con diferente número de días, en distintos países la manera de colocar el dato del día o del mes se cambia, en años bisiestos febrero tiene un día extra entre otros factores, hay diferentes&lt;/p&gt;
&lt;p&gt;Por ende, hacer cálculos con fechas puede resultar algo complicado, sin embargo R tiene un sistema robusto para poder lidiar con estas situaciones.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fechas-y-horas-en-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Fechas y Horas en R:&lt;/h1&gt;
&lt;p&gt;R tiene diversas maneras de representar objetos en el sistema. Más allá de los dobles, enteros, carácteres, lógicos y complejos, R tiene una clase especial para representar las fechas y horas.&lt;/p&gt;
&lt;p&gt;Si queremos revisar cuál es la fecha y hora que tenemos en nuestro sistema podemos hacerlo con la función &lt;code&gt;Sys.time()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Sys.time()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2018-03-15 00:00:48 CST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo que nos muestra es una descripción de la fecha y hora de manera meramente jerárquica: la escala más grande (años) va primero, seguido por el mes y por último el día, separados entre sí por un guión; luego hay un espacio en blanco y bajo la misma lógica tenemos la hora, los minutos y los seugundos, separados cada uno por dos punto. Al final tenemos un dato que nos indica el sistema de tiempo utilizado, en este caso Central Standard Time.&lt;/p&gt;
&lt;p&gt;Esta convención es buena para poder leer de manera fácil, sin embargo, para la realización de cálculos esto es un poco difícil por lo que el manejo de estas a lo “interno” de R se hace basado en segundos.&lt;/p&gt;
&lt;div id=&#34;tipo-y-clase-del-tiempo-en-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tipo y Clase del tiempo en R:&lt;/h2&gt;
&lt;p&gt;Para revisar su &lt;em&gt;tipo de dato&lt;/em&gt; y su &lt;em&gt;clase&lt;/em&gt; vamos a guardar esta fecha y hora de nuestro ordenador en un objeto de la siguiente manera:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fecha_hora &amp;lt;- Sys.time() # Guardar en un objeto

typeof(fecha_hora) # Tipo de dato&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;double&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(fecha_hora) # Clase del objeto&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;POSIXct&amp;quot; &amp;quot;POSIXt&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al momento de utilizar la función&lt;code&gt;Sys.time()&lt;/code&gt;, nos devuelve una respuesta que a primera instancia nos parecería un objeto de tipo &lt;em&gt;character&lt;/em&gt; por sus comillas alrededor de esto, sin embargo, al revisar podemos notar que es un objeto de tipo &lt;em&gt;double&lt;/em&gt; y su clase es _ “POSIXct” “POSIXt” _ (tiene dos clases)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;que-signifan-esas-dos-clases&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;¿Qué signifan esas dos clases?&lt;/h2&gt;
&lt;p&gt;Como mencionamos anteriormente, por convención en R se utiliza una representación numérica, basada en segundos. Esto quiere decir que cada fecha se representa por el número de segundos que han transcurrido desde las &lt;strong&gt;12:00 A.M. del 1 Enero de 1970. &lt;/strong&gt; (UTC: Coordinated Universal Time)&lt;/p&gt;
&lt;p&gt;Esto es bastante útil si queremos generar gráficos de series de tiempo, pero qué sucede si queremos representar las medias por mes, o por día. En este caso es necesario contar con dos maneras de representar las fechas:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POSIXct&lt;/strong&gt; el sufijo &lt;strong&gt;ct&lt;/strong&gt; se refiere a &lt;em&gt;continuos time&lt;/em&gt; y este formato es representado de manera númerica por segundos. Este es un &lt;strong&gt;vector&lt;/strong&gt; que se puede usar como una variable continua en modelos de regresión.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;POSIXlt&lt;/strong&gt; el sufijo &lt;strong&gt;lt&lt;/strong&gt; corresponde a &lt;em&gt;list time&lt;/em&gt; y lo que hace es una lista de todas las descripciones categóricas del tiempo. Es muy útil como variable explicativa categórica.&lt;/p&gt;
&lt;div id=&#34;como-funcionan-el-sistema-posix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;¿Cómo funcionan el sistema POSIX?&lt;/h3&gt;
&lt;p&gt;Para revisar de qué manera R hace esto podemos hacer uso de la función &lt;code&gt;unclass()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unclass(fecha_hora)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1521093649&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El resultado que obtenemos es un elemento que R utiliza para construir un vector doble. Lo que tenemos allí es que desde las 12:00 A.M. del 1 de Enero de 1970 han transcurrido &lt;em&gt;1 514 244 708&lt;/em&gt; hasta el día en que este tutorial se ha creado y este es el formato &lt;strong&gt;POSIXct&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;En el caso de caso de una lista como &lt;strong&gt;POSIXlt&lt;/strong&gt; vamos a revisar los componentes del mismo objeto con el que hemos venido trabajando:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fecha_hora &amp;lt;- as.POSIXlt(fecha_hora) # Definimos formato
unlist(fecha_hora) # Sacamos de la lista los objetos almacenados&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                sec                min               hour 
## &amp;quot;49.1189699172974&amp;quot;                &amp;quot;0&amp;quot;                &amp;quot;0&amp;quot; 
##               mday                mon               year 
##               &amp;quot;15&amp;quot;                &amp;quot;2&amp;quot;              &amp;quot;118&amp;quot; 
##               wday               yday              isdst 
##                &amp;quot;4&amp;quot;               &amp;quot;73&amp;quot;                &amp;quot;0&amp;quot; 
##               zone             gmtoff 
##              &amp;quot;CST&amp;quot;           &amp;quot;-21600&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;¿Qué es lo que tenemos? Se nos muestran los componentes de la lista, que está representada por el número de segundos, minutos, hora (en formato de 24 horas). Luego viene &lt;strong&gt;mday&lt;/strong&gt; que es el día del mes (inicia en 1), &lt;strong&gt;mon&lt;/strong&gt; es el mes del año (comienza en enero = 0), &lt;strong&gt;year&lt;/strong&gt; que representa el año (inicia en 0 = 1900),&lt;strong&gt;wday&lt;/strong&gt; el día de la semana (inicia domingo = 0), &lt;strong&gt;yday&lt;/strong&gt; es el número de día del año (1 de enero = 0). Por último la variable &lt;strong&gt;isdst&lt;/strong&gt; lo que hace es indicarnos si un horario de verano está siendo considerado (0 = FALSE, como en este caso)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;leer-fechas-desde-archivos&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Leer fechas desde archivos&lt;/h1&gt;
&lt;p&gt;Cuando traemos datos a R, en ocasiones hay que hacerle explícito a R el tipo de datos que tenemos. En el caso de las fechas es necesario, ya que de esta forma determinamos qué dato corresponde a cuál componente de lo que se considera una fecha u hora.&lt;/p&gt;
&lt;p&gt;Vamos a utilizar el set de datos &lt;em&gt;Flights that Depart NYC in 2013&lt;/em&gt; que tiene como nombre &lt;strong&gt;nycflights13&lt;/strong&gt;. Este se encuentra en el paquete con el mismo nombre. (Si no lo tienen, pueden instalarlo con la función &lt;code&gt;install.packages(&amp;quot;nycflights13&amp;quot;)&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- nycflights13::flights # Guardar en objeto datos seleccionados
head(data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 19
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013     1     1      517            515         2      830
## 2  2013     1     1      533            529         4      850
## 3  2013     1     1      542            540         2      923
## 4  2013     1     1      544            545        -1     1004
## 5  2013     1     1      554            600        -6      812
## 6  2013     1     1      554            558        -4      740
## # ... with 12 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El conjunto de datos trae 3 columnas con el año, el mes y el día, los cuales vamos a unir y darle format de fecha:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr) # Paquete del cual vamos a utilizar función
data &amp;lt;- unite(data, Date, year, month,day, sep = &amp;quot;/&amp;quot;)
head(data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 17
##       Date dep_time sched_dep_time dep_delay arr_time sched_arr_time
##      &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;
## 1 2013/1/1      517            515         2      830            819
## 2 2013/1/1      533            529         4      850            830
## 3 2013/1/1      542            540         2      923            850
## 4 2013/1/1      544            545        -1     1004           1022
## 5 2013/1/1      554            600        -6      812            837
## 6 2013/1/1      554            558        -4      740            728
## # ... with 11 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;,
## #   flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;,
## #   distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;funcion-strptime&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Función strptime&lt;/h3&gt;
&lt;p&gt;Ya que tenemos dicha column creada, vamos a indicarle R qué de esos datos pertenece al año, al mes y al día:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Rdate &amp;lt;- strptime(as.character(data$Date), &amp;quot;%Y/%m/%d&amp;quot;)
class(Rdate)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;POSIXlt&amp;quot; &amp;quot;POSIXt&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ya tenemos el objeto creado con las fechas por lo que ahora podemos unirlo al set de datos:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- data.frame(Rdate,data)
head(data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        Rdate     Date dep_time sched_dep_time dep_delay arr_time
## 1 2013-01-01 2013/1/1      517            515         2      830
## 2 2013-01-01 2013/1/1      533            529         4      850
## 3 2013-01-01 2013/1/1      542            540         2      923
## 4 2013-01-01 2013/1/1      544            545        -1     1004
## 5 2013-01-01 2013/1/1      554            600        -6      812
## 6 2013-01-01 2013/1/1      554            558        -4      740
##   sched_arr_time arr_delay carrier flight tailnum origin dest air_time
## 1            819        11      UA   1545  N14228    EWR  IAH      227
## 2            830        20      UA   1714  N24211    LGA  IAH      227
## 3            850        33      AA   1141  N619AA    JFK  MIA      160
## 4           1022       -18      B6    725  N804JB    JFK  BQN      183
## 5            837       -25      DL    461  N668DN    LGA  ATL      116
## 6            728        12      UA   1696  N39463    EWR  ORD      150
##   distance hour minute           time_hour
## 1     1400    5     15 2013-01-01 05:00:00
## 2     1416    5     29 2013-01-01 05:00:00
## 3     1089    5     40 2013-01-01 05:00:00
## 4     1576    5     45 2013-01-01 05:00:00
## 5      762    6      0 2013-01-01 06:00:00
## 6      719    5     58 2013-01-01 05:00:00&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;que-fue-lo-que-hicimos&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;¿Qué fué lo que hicimos?&lt;/h3&gt;
&lt;p&gt;La columna date contenía datos separados por un guión, en donde el primer dato pertenecía al año, el segundo al mes y el tercero al día, por ende le dijimos a R que leyera esos datos como año, mes y día separados por un &lt;strong&gt;/&lt;/strong&gt;: (&lt;code&gt;&amp;quot;%Y/%m/%d&amp;quot;&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Estas son abreviaciones que dan a entender diferentes formas de leer el dato en R. La siguiente es una lista de todas las abreviaciones:&lt;/p&gt;
&lt;table style=&#34;width:32%;&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;19%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Símbolo&lt;/th&gt;
&lt;th&gt;Significado&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%a&lt;/td&gt;
&lt;td&gt;Nombre de la semana abreviado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%A&lt;/td&gt;
&lt;td&gt;Nombre de la semana completo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%b&lt;/td&gt;
&lt;td&gt;Nombre del mes abreviado&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%B&lt;/td&gt;
&lt;td&gt;Nombre del mes completo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;Hora y Fecha específica a la localidad&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%d&lt;/td&gt;
&lt;td&gt;Día del mes como un número decimal (01-31)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%H&lt;/td&gt;
&lt;td&gt;Horas como decimales en reloj de 24 horas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%I&lt;/td&gt;
&lt;td&gt;Horas como decimales en reloj de 12 horas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%j&lt;/td&gt;
&lt;td&gt;Día del año como número decimal (0 - 366)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%m&lt;/td&gt;
&lt;td&gt;Mes como un número decimal (0-11)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%M&lt;/td&gt;
&lt;td&gt;Minutos como un número decimal (00 - 59)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%p&lt;/td&gt;
&lt;td&gt;AM/PM indicador en la localidad&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%S&lt;/td&gt;
&lt;td&gt;Segundos como número decimal (00 - 61)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%U&lt;/td&gt;
&lt;td&gt;Semana del año (00 - 53) usando el primer domingo como el día 1 de la semana 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%w&lt;/td&gt;
&lt;td&gt;Día de la semana como un número decimal (0 - 6, Domingo es 0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%W&lt;/td&gt;
&lt;td&gt;Semana del año (00 - 53) usando el primer lunes como día 1 de la semana 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%x&lt;/td&gt;
&lt;td&gt;Fecha, específica de la localidad&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%X&lt;/td&gt;
&lt;td&gt;Hora, específica de la localidad&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%Y&lt;/td&gt;
&lt;td&gt;Año con centenario&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%y&lt;/td&gt;
&lt;td&gt;Año sin centenario&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;%Z&lt;/td&gt;
&lt;td&gt;Zona horaria como un vector de tipo caracter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;nombre-completo-del-dia&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Nombre completo del día:&lt;/h3&gt;
&lt;p&gt;Ahora bien, hay ocasiones en que por ejemplo, tenemos el día como un número, pero nos serviría más tener el nombre del día. Para esto existe la función &lt;code&gt;weekdays()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ejemplo &amp;lt;- data[1,1]
ejemplo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2013-01-01 CST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tenemos el 1ero de enero del 2013, ahora queremos ver qué día es este con su nombre:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;weekdays(ejemplo)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;martes&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;otros-formatos&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Otros formatos&lt;/h3&gt;
&lt;p&gt;Fechas pueden venir en diversas formas, tenemos que aprender cómo lidiar con estas y cómo hacerle explícito a R qué es qué. Para esto tenemos como ayuda la tabla presentada anteriormente.&lt;/p&gt;
&lt;p&gt;Un ejemplo podría ser el siguiente:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;otras_fechas &amp;lt;- c(&amp;quot;2feb2016&amp;quot;,&amp;quot;18jun1990&amp;quot;,&amp;quot;7nov1995&amp;quot;)
strptime(otras_fechas,&amp;quot;%d%b%Y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2016-02-02 CST&amp;quot; &amp;quot;1990-06-18 CST&amp;quot; &amp;quot;1995-11-07 CST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;: ¿Qué hicimos?&lt;/p&gt;
&lt;p&gt;Leímos un conjunto de fechas que tenían un formato de día, seguido del nombre del mes y por último el año completo y se lo hicimos saber a R indicándole %día, luego %mes y por último %año.&lt;/p&gt;
&lt;p&gt;Ahora cada vez que tengamos fechas, sabremos que debemos indicarle a R qué contienen esos datos y qué es qué guiándonos con la tabla provista.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;calculos-con-el-tiempo&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Cálculos con el tiempo:&lt;/h1&gt;
&lt;p&gt;Para tener la diferencia entre dos fechas, podemos echar mano de la función &lt;code&gt;difftime()&lt;/code&gt;. Hay que tomar en cuenta que esta función nos devuelve un objeto de clase &lt;em&gt;difftime&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;diferencias-entre-fechas-en-un-vector&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Diferencias entre fechas en un vector&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Primero hacemos un objeto a clase difftime:
as.difftime(otras_fechas, &amp;quot;%d%b%Y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time differences in days
## [1]   -772 -10132  -8164&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;calculos-con-dos-objetos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cálculos con dos objetos:&lt;/h2&gt;
&lt;p&gt;Hay cálculos que se pueden generar con fechas y horas, ya sea sumando a una fecha o a una hora un número (que representará segundos), también entre fechas/horas e inclusive la utilización de operadores lógicos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# vamos a generar dos fechas:

fecha_1 &amp;lt;- as.POSIXlt(&amp;quot;2018-01-01&amp;quot;)
fecha_2 &amp;lt;- as.POSIXlt(&amp;quot;2017-01-02&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Y podemos sumar una fecha con un número:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fecha_1 + 100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2018-01-02 03:46:40 CST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto nos suma cien mil segundos, lo cual agrega 3 horas, 46 minutos y 40 segundos a la fecha que habíamos creado.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Podemos resta esa misma cantidad de segundos:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fecha_1 - 100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2017-12-30 20:13:20 CST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vemos que nos devuelve al 30 de diciembre del 2017 a las 20 con 13 minutos y 20 segundos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restarle a la fecha 1 la fecha 2:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fecha_1 - fecha_2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time difference of 364 days&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nos dice que entre las fechas hay 364 días.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hacer una operación lógica:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fecha_1 &amp;lt;= fecha_2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si decimos que &lt;code&gt;fecha_1&lt;/code&gt; es &lt;em&gt;menor o igual&lt;/em&gt; &lt;code&gt;que fecha_2&lt;/code&gt; R nos dice que eso es falso.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;diferencia-de-dias&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Diferencia de días:&lt;/h2&gt;
&lt;p&gt;Si tenemos una pregunta como: ¿Cuántos días han transcurrido desde el 1 de diciembre del 2017 al 2 de enero del 2018?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;difftime(&amp;quot;2018-01-02&amp;quot;,&amp;quot;2017-12-01&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time difference of 32 days&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La respuesta es que han transcurrido 32 días.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;diferencia-de-horas&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Diferencia de horas:&lt;/h2&gt;
&lt;p&gt;En este caso, si tenemos horas en lugar de fechas, podemos hacer uso de la función &lt;code&gt;as.difftime()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tiempo_1 &amp;lt;- as.difftime(&amp;quot;12:00:00&amp;quot;)
tiempo_2 &amp;lt;- as.difftime(&amp;quot;17:20:00&amp;quot;)
tiempo_2 - tiempo_1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time difference of 5.333333 hours&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nos dice cuál es la diferencia en horas. (Si te preguntas porqué 5.33 en lugar de 5 horas y 20 minutos, recuerde que la respuesta está dada en horas y 20 minutos corresponden a 0.333 horas)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;generacion-de-secuencias-con-tiempo&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Generación de secuencias con tiempo:&lt;/h1&gt;
&lt;p&gt;Si queremos generar secuencias de fechas, años, meses, semanas etc, en R lo podemos realizar sin mucho problema:&lt;/p&gt;
&lt;div id=&#34;secuencia-en-aumento-por-dia&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Secuencia en aumento por día:&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seq(as.POSIXlt(&amp;quot;2018-01-01&amp;quot;), as.POSIXlt(&amp;quot;2018-01-10&amp;quot;), &amp;quot;1 day&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;2018-01-01 CST&amp;quot; &amp;quot;2018-01-02 CST&amp;quot; &amp;quot;2018-01-03 CST&amp;quot; &amp;quot;2018-01-04 CST&amp;quot;
##  [5] &amp;quot;2018-01-05 CST&amp;quot; &amp;quot;2018-01-06 CST&amp;quot; &amp;quot;2018-01-07 CST&amp;quot; &amp;quot;2018-01-08 CST&amp;quot;
##  [9] &amp;quot;2018-01-09 CST&amp;quot; &amp;quot;2018-01-10 CST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;¿Qué hicimos?&lt;/strong&gt; La función &lt;code&gt;seq()&lt;/code&gt; nos genera un vector con una serie de valores de una secuencia, en este caso le indicamos dos elementos de tipo &lt;code&gt;POSIXlt&lt;/code&gt; que corresponden a fechas y un último argumento que indica 1 día. Es decir, que del 1ero de enero del 2018 al 10 de enero del 2018 queremos una secuencia entre esas fechas que aumente de 1 día en 1 día.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;secuencia-en-aumento-por-semanas&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Secuencia en aumento por semanas:&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seq(as.POSIXlt(&amp;quot;2018-01-01&amp;quot;), as.POSIXlt(&amp;quot;2018-02-01&amp;quot;), &amp;quot;1 weeks&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2018-01-01 CST&amp;quot; &amp;quot;2018-01-08 CST&amp;quot; &amp;quot;2018-01-15 CST&amp;quot; &amp;quot;2018-01-22 CST&amp;quot;
## [5] &amp;quot;2018-01-29 CST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;¿Qué hicimos?&lt;/strong&gt; Nuevamente indicamos un par de fechas que delimitan el inicio y el final de la secuencia y por último le decimos que la secuencia aumente de semana en semana.&lt;/p&gt;
&lt;p&gt;Esto lo podemos hacer de igual manera si queremos que la secuencia aumente por meses &lt;code&gt;months&lt;/code&gt; o por años &lt;code&gt;year&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;secuencia-en-aumento-por-tiempo-en-segundos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Secuencia en aumento por tiempo en segundos:&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seq(as.POSIXlt(&amp;quot;2018-01-01&amp;quot;),as.POSIXlt(&amp;quot;2018-01-02&amp;quot;),8000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;2018-01-01 00:00:00 CST&amp;quot; &amp;quot;2018-01-01 02:13:20 CST&amp;quot;
##  [3] &amp;quot;2018-01-01 04:26:40 CST&amp;quot; &amp;quot;2018-01-01 06:40:00 CST&amp;quot;
##  [5] &amp;quot;2018-01-01 08:53:20 CST&amp;quot; &amp;quot;2018-01-01 11:06:40 CST&amp;quot;
##  [7] &amp;quot;2018-01-01 13:20:00 CST&amp;quot; &amp;quot;2018-01-01 15:33:20 CST&amp;quot;
##  [9] &amp;quot;2018-01-01 17:46:40 CST&amp;quot; &amp;quot;2018-01-01 20:00:00 CST&amp;quot;
## [11] &amp;quot;2018-01-01 22:13:20 CST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso 8000 &lt;strong&gt;segundos&lt;/strong&gt; nos genera un aumento de 2 horas, 13 minutos y 20 segundos en cada elemento de la secuencia.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;secuencia-sin-especificacion-de-final&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Secuencia sin especificación de final:&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seq(as.POSIXlt(&amp;quot;2018-01-01&amp;quot;), by = &amp;quot;weeks&amp;quot;, length = 7)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2018-01-01 CST&amp;quot; &amp;quot;2018-01-08 CST&amp;quot; &amp;quot;2018-01-15 CST&amp;quot; &amp;quot;2018-01-22 CST&amp;quot;
## [5] &amp;quot;2018-01-29 CST&amp;quot; &amp;quot;2018-02-05 CST&amp;quot; &amp;quot;2018-02-12 CST&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;¿Qué hicimos?&lt;/strong&gt; Generamos nuevamente una secuencia en donde sólo le indicamos la fecha en la que debe de iniciar, seguido del argumento semanas y por último la cantidad de objetos que debería de crear. Es decir, el final está generado por la cantidad (&lt;code&gt;length&lt;/code&gt;) de elementos que queremos en esa secuencia.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;recuento.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Recuento.&lt;/h1&gt;
&lt;p&gt;¡Listo! Si has llegado hasta este punto, felicidades. Espero que haya comprendido mejor cómo trabajar y manejar este tipo de dato para sus propios análisis.&lt;/p&gt;
&lt;p&gt;Hasta acá hemos visto cuáles son los tipos y la clase de las fechas y horas en R, la diferencia entre las dos manera de &lt;code&gt;POSIX&lt;/code&gt; de representar las fechas u horas. También revisamos la manera en que se pueden leer archivos o conjuntos de datos que contengan elementos que corresponden a fechas y cómo indicarle a R el formato de fecha y hora que se está trabajando. Así mismo vimos cómo hacer algunos cálculos con datos de tiempo y por último la generación de secuencias.&lt;/p&gt;
&lt;p&gt;Pero esto no es todo. Hay una segunda parte, en donde veremos cómo hacer un análisis de datos utilizando fechas y horas, tal como una regresión o un ANOVA.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Intro a datos y estructuras en R</title>
      <link>/post/intro-a-datos-y-estructuras-en-r/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/intro-a-datos-y-estructuras-en-r/</guid>
      <description>&lt;div id=&#34;datos-y-estructuras&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Datos y Estructuras&lt;/h1&gt;
&lt;p&gt;Este pequeño e introductorio tutorial consiste en explicar cómo R en su entorno “entiende” los datos (objetos), es decir sus clases y además cómo los almacena en ese entorno. Entender este tipo de cosas básicas en R nos podrán ahorrar dolores de cabeza en futuros análisis de datos que hagamos.&lt;/p&gt;
&lt;div id=&#34;primer-paso&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Primer paso:&lt;/h2&gt;
&lt;p&gt;Primero tenemos que entender que R lee los datos que le damos de distintas maneras para poder manejarlos y hacer tareas que le pidamos. Entre estos tenemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;character&lt;/em&gt;: corresponden a texto&lt;/li&gt;
&lt;li&gt;&lt;em&gt;numeric&lt;/em&gt;: corresponden a números&lt;/li&gt;
&lt;li&gt;&lt;em&gt;integer&lt;/em&gt;: son números enteros (sin decimales)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;logical&lt;/em&gt;: son condicionales y están en forma de verdadero o falso&lt;/li&gt;
&lt;li&gt;&lt;em&gt;complex&lt;/em&gt;: corresponden a números complejos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para crear vectores c( )&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a &amp;lt;- c(&amp;quot;biologia&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;estadistica&amp;quot;)
class(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;b &amp;lt;- c(18.6, 90)
class(b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c &amp;lt;- c(18L, 26L)
class(c)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d &amp;lt;- 2 + 4i
class(d)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;complex&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;e &amp;lt;- c(TRUE, FALSE)
class(e)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;logical&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;para-que-sirven-los-tipos-de-datos&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;¿Para qué sirven los tipos de datos?&lt;/h1&gt;
&lt;p&gt;Hay ciertas cosas que se deben de tomar en cuenta a la hora de trabajar con datos en R, y es que estos son guardados en estructuras. Es decir, R “acomoda” esos datos en formas que los puede manejar.&lt;/p&gt;
&lt;p&gt;Estos son algunos ejemplos rápidos:&lt;/p&gt;
&lt;div id=&#34;vectores-elementos-son-del-mismo-tipo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Vectores elementos son del mismo tipo&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;v_1 &amp;lt;- c(10,20,30)
v_2 &amp;lt;- c(&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;)
v_3 &amp;lt;- c(TRUE,FALSE,TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;listas-elementos-son-de-diferente-tipo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Listas elementos son de diferente tipo&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l_1 &amp;lt;- list(v_1,v_2,v_3)

l_1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 10 20 30
## 
## [[2]]
## [1] &amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;
## 
## [[3]]
## [1]  TRUE FALSE  TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;matrix-es-de-dos-dimensiones-con-elementos-del-mismo-tipo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;matrix es de dos dimensiones con elementos del mismo tipo:&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matrix_1 &amp;lt;- matrix(1:9,nrow = 3, ncol = 3)
matrix_1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    4    7
## [2,]    2    5    8
## [3,]    3    6    9&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-frame-es-de-dos-dimensiones-con-elementos-de-diferente-tipo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;data frame es de dos dimensiones con elementos de diferente tipo:&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Primero creamos un par de vectores para unirlos en un dataframe
numero &amp;lt;- 1:5
nombre &amp;lt;- c(&amp;quot;Mercurio&amp;quot;,&amp;quot;Venus&amp;quot;,&amp;quot;Tierra&amp;quot;,&amp;quot;Marte&amp;quot;,&amp;quot;Jupiter&amp;quot;)
planeta &amp;lt;- data.frame(numero,nombre)
planeta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   numero   nombre
## 1      1 Mercurio
## 2      2    Venus
## 3      3   Tierra
## 4      4    Marte
## 5      5  Jupiter&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;array-es-una-estructura-de-tres-o-mas-dimensiones&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Array es una estructura de tres o más dimensiones:&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;D &amp;lt;- 1:12
dim(D) &amp;lt;- c(2,3,2)        # Dos filas, tres columnas y dos &amp;quot;caras&amp;quot;
D&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## , , 1
## 
##      [,1] [,2] [,3]
## [1,]    1    3    5
## [2,]    2    4    6
## 
## , , 2
## 
##      [,1] [,2] [,3]
## [1,]    7    9   11
## [2,]    8   10   12&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;maneras-de-coercionar-las-clases&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Maneras de coercionar las clases&lt;/h1&gt;
&lt;p&gt;Hay ocasiones en las cuales R podría confundir lo que nosotros consideramos un dato de cierto tipo, por ejemplo un número lo podría leer como un carácter. A la hora de hacer algunos cálculos habrán problemas.&lt;/p&gt;
&lt;p&gt;Pero existe una solución y esto es coercionar los tipos de los datos. Esto se puede hacer tal como se muestra en los siguientes ejemplos:&lt;/p&gt;
&lt;p&gt;Diapo 36&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;biolo_vector &amp;lt;- c(20, 40, &amp;quot;A&amp;quot;, 80)
class(biolo_vector)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z &amp;lt;- as.numeric(biolo_vector)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: NAs introducidos por coerción&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 20 40 NA 80&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;biolo_vector &amp;lt;- c(20, 40, TRUE, 80)
class(biolo_vector)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;numeric&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;biolo_vector&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 20 40  1 80&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;biolo_vector &amp;lt;- c(20:60)
bv_1 &amp;lt;- as.character(biolo_vector)
bv_2 &amp;lt;- as.logical(biolo_vector)
bv_3 &amp;lt;- as.complex(biolo_vector)
class(bv_1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(bv_2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;logical&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(bv_3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;complex&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exploracion-datos&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exploración datos:&lt;/h1&gt;
&lt;p&gt;Cuando traemos datos a R hay una manera fácil de visualizar su estructura o forma sin tener que acudir al documento original. A continuación mostramos una serie de ejemplos en los cuales se m Diapo 62&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dir()                              # ver que tengo en el wd
head(data)                         # Ver primeros 6 observaciones
tail(data)                         # últimas 6 observaciones
str(data)                          # estructura del data.frame
dim(data)                          # dimensiones (rows &amp;amp; columns)
names(data)                        # nombres columnas
glimpse(data)                      # paquete diplyr
summary(data)                      # resumen de cada variable&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;que-siginifica-dir-y-ls&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;¿Qué siginifica dir() y ls()?&lt;/h2&gt;
&lt;p&gt;dir () me refiere a los archivos que se encuentran en el directorio de trabajo. ls () me refiere a los objetos que se encuentran en el espacio de trabajo&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;comprension-de-un-data-frame-y-su-estructura&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Comprensión de un data frame y su estructura&lt;/h1&gt;
&lt;p&gt;Para comprender mejor vamos a construir un data.frame de manera rápida y simple:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creamos-los-vectores-a-unir&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Creamos los vectores a unir:&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;primer_nombre &amp;lt;- c(&amp;quot;Isaac&amp;quot;,&amp;quot;Charles&amp;quot;,&amp;quot;Rosalind&amp;quot;,&amp;quot;Marie&amp;quot;) 

segundo_nombre &amp;lt;- c(&amp;quot;Newton&amp;quot;,&amp;quot;Darwin&amp;quot;,&amp;quot;Franklin&amp;quot;,&amp;quot;Curie&amp;quot;)

edad_muerte &amp;lt;- c(84, 73, 37, 66)

campo &amp;lt;- c(&amp;quot;Física&amp;quot;, &amp;quot;Biología&amp;quot;, &amp;quot;Química&amp;quot;, &amp;quot;Física&amp;quot;)

fecha_muerte &amp;lt;- as.Date(c(&amp;quot;1643-1-4&amp;quot;, &amp;quot;1882-4-19&amp;quot;,
                        &amp;quot;1958-4-16&amp;quot;, &amp;quot;1934-7-4&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;unimos-cada-uno-de-los-vectores-en-un-data.frame&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Unimos cada uno de los vectores en un data.frame&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cientificos &amp;lt;- data.frame(primer_nombre, segundo_nombre,
                          edad_muerte, campo, fecha_muerte)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;revisemos-estructura-igual-que-en-caso-anterior&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Revisemos estructura igual que en caso anterior&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(cientificos)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   primer_nombre segundo_nombre edad_muerte    campo fecha_muerte
## 1         Isaac         Newton          84   Física   1643-01-04
## 2       Charles         Darwin          73 Biología   1882-04-19
## 3      Rosalind       Franklin          37  Química   1958-04-16
## 4         Marie          Curie          66   Física   1934-07-04&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(cientificos)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    4 obs. of  5 variables:
##  $ primer_nombre : Factor w/ 4 levels &amp;quot;Charles&amp;quot;,&amp;quot;Isaac&amp;quot;,..: 2 1 4 3
##  $ segundo_nombre: Factor w/ 4 levels &amp;quot;Curie&amp;quot;,&amp;quot;Darwin&amp;quot;,..: 4 2 3 1
##  $ edad_muerte   : num  84 73 37 66
##  $ campo         : Factor w/ 3 levels &amp;quot;Biología&amp;quot;,&amp;quot;Física&amp;quot;,..: 2 1 3 2
##  $ fecha_muerte  : Date, format: &amp;quot;1643-01-04&amp;quot; &amp;quot;1882-04-19&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#glimpse(cientificos) con librería dplyr&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tiempo en R: Uso de datos de fechas y tiempo con R</title>
      <link>/talk/example-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 -0600</pubDate>
      
      <guid>/talk/example-talk/</guid>
      <description>&lt;p&gt;Material de la charla como diapositivas y código pronto las estaré compartiendo por &lt;a href=&#34;https://github.com/ronnyhdez&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep Learning</title>
      <link>/project/ciencia-cuidadana/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/ciencia-cuidadana/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Structural Complexity</title>
      <link>/project/structural-complexity/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/structural-complexity/</guid>
      <description>&lt;p&gt;Analysis of vegetation has intrigued forestry scientists and ecologists for decades. In tropical forests, the interpretation of the wide heterogeneity of their structure and our tropical forests still lack indicators or guidance that represent the great diversity and structural complexity that they possess.&lt;/p&gt;

&lt;p&gt;A new attempt has emerged with the use of digital images that allow spatiotemporal analyses as indicators of the spatial and temporal heterogeneity of the structure and analyze the patterns of the components photographed (shapes, texture, arrays and colors of the pixels). In this study, we analyze thousands of photographs taken in the subsoil of various types of forests in the Peninsula of Osa, Costa Rica. These flat digital photos were obtained with time-lapse cameras, programmed at intervals defined in four microenvironments typical of tropical rainforest: primary forest, hillside forest, riparian forest and secondary forest.&lt;/p&gt;

&lt;p&gt;Spatial heterogeneity indices such as Mean Information Gain (MIG) and Spatial Anisotropy (A) were calculated to correlate aspects of the composition, structural complexity and geometric pattern of the internal canopy in the period between February and December 2015. We found a temporal variation in the MIG value and spatial anisotropy throughout the year. Mean MIG values show a tendency to decrease during the period in all microenvironments. MIG values vary throughout the day being greater than 12:00 and the lowest values at 8:00 AM and 3:00 PM.&lt;/p&gt;

&lt;p&gt;The MIG and spatial anisotropy values show a moderate to a low relation with some classic forest parameters of the structure and geometry of the habitats, whose seems fairly related from each other. The results show that this methodology is sensitive and useful to variations in the composition and structure of the forests, which allows the monitoring of dynamics in time and space. However, there is room to increase efforts to discern possible structural and functional details that seem to define the tremendous spatial heterogeneity found in the forests of the Osa Peninsula.&lt;/p&gt;

&lt;p&gt;This project is part of the &lt;a href=&#34;https://lefet.weebly.com/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Laboratorio de Ecología Funcional y Ecosistemas Funcionales&lt;/strong&gt;&lt;/a&gt;, Escuela de Biolgía of the &lt;strong&gt;Universidad Nacional de Costa Rica&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Is co-authored with &lt;a href=&#34;https://scholar.google.es/citations?user=lCPpVZwAAAAJ&amp;amp;hl=es&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Roberto Cordero&lt;/strong&gt;&lt;/a&gt; and &lt;strong&gt;Albert Moreira&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why a blog? / ¿Porqué un blog personal?</title>
      <link>/post/getting-started/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 -0600</pubDate>
      
      <guid>/post/getting-started/</guid>
      <description>

&lt;h1 id=&#34;why-a-blog&#34;&gt;Why a blog?&lt;/h1&gt;

&lt;p&gt;Basically I would like to try to share things that I have learn while I study Biology, mainly the R programming languaje.&lt;/p&gt;

&lt;p&gt;Also this gives me the opportunity to communicate what is what I do in my research.&lt;/p&gt;

&lt;h1 id=&#34;por-qué-una-página-web&#34;&gt;¿Por qué una página web?&lt;/h1&gt;

&lt;p&gt;Basicamente me gustaría compartir lo que he aprendido durante mis estudios en biología, especialmente el lenguaje de programación R.&lt;/p&gt;

&lt;p&gt;Así mismo me da la oportunidad de divulgar qué es lo que hago en mis participaciones en investigaciones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Person Re-Identification System For Mobile Devices</title>
      <link>/publication/person-re-identification/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/publication/person-re-identification/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mobile visual clothing search</title>
      <link>/publication/clothing-search/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>/publication/clothing-search/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
